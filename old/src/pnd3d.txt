PND3D engine by Ken Silverman (http://advsys.net/ken)
06/24/2014: First public release of PND3D engine demo
03/07/2018: First public release of PND3D source code
------------------------------------------------------------------------------
Introduction:

The PND3D engine is something I started, really in response to the hype of
Unlimited Detail. Initially my goal was to figure out their algorithm. I
started my first prototype in August 2008. It wasn't until December 2009 that
I found a rendering algorithm I was happy with (and by that I mean a fast
enough worst case). Then in 2011, Ace of Spades happened, and so I shifted my
goal to making a successor to the Voxlap engine. Voxlap's main feature is the
ability to support unlimited modification to voxels on the grid. Note that
this design goal is in conflict to tricks like instancing, which can save
greatly on memory.

I did a lot of stuff over the next year, then AoS changed hands and I lost
interest in the project. I got frustrated over silly things like physics code
and shifted into other projects. I figured today was a good day to end the
silence.

Some major improvements over Voxlap are:
   * Texture mapping
   * Support up to 4096^3 grids (higher than that works but with artifacts due
        to an optimization of structure size)
   * Support multiple voxel grids; world and sprites are handled the same
   * Fast, voxel-accurate collision detection
   * More compact file format: *.KVO (Ken's Voxel Octree)

Some less noticable improvements:
   * Ability to quickly double or halve voxel grid size if necessary
   * Ability to safely travel inside solid (Voxlap would crash if you tried!)
   * Ability to render from any viewpoint (Voxlap required you to be inside or
        above map!)
   * Fewer visual artifacts (no jagged edges; no artifacts when looking up or
        down; no mip-mapping required)
   * Multithread support
   * Some GPU acceleration
   * Effects such as transparency and entire sprite shading offset
   * Built-in drawsph() and drawcone() functions - handy for debugging
   * Faster / more accurate normal estimation

Some of my disappointments with the new engine are:
   * Mod speed. This is mostly the fault of copying from CPU to GPU memory.
        For games that require less frequent, small changes, this is not
        an issue. Also note that it is not an issue when using /cpu mode.
        I suppose this will no longer be an issue once unified CPU&GPU
        memory becomes common.
   * Physics. I was greedy - I wanted it all. I never figured out how to
        handle multiple simultaneous contacts correctly - not even a hack.
        Currently, objects get stuck and disappear when this happens. I found
        a paper about it and I admit the math is beyond me. The good news is
        things are finished on the voxel engine side - meaning I have a fully
        working function that detects exact cube voxel to voxel collision,
        which returns contact and normal vector.

File list:
   PND3D.EXE: The engine demo, limited to 4096^3
   PND3D.TXT: This help file
   KENSKY.JPG: A skybox I generated with Terragen (to see, use /fogdist=1e32)
   KLABTILES.PNG: Some example textures I grabbed from Ken's Labyrinth
   CACO.KVO: Example test model

   PND3D.C/H: Main engine source code and header.
   KDISASM.C: x86 disassembler. Apparently, I wrote my own exception handler
              so I could debug without installing a debugger.
   DRAWCONE.C: Draw cones, cylinders, spheres. CPU & GPU. Very handy for
               editing & debugging.
   WINMAIN.CPP/SYSMAIN.H: Old windows layer currently used by PND3D
   CWINMAIN.C/H: New windows layer, currently used only by drawcone standalone
                 test program.
   KPLIB.C: Ken's picture (and ZIP) library.
   SIMP.C/EXE: Simple test program using PND3D library.

Requirements:
   CPU: Must support SSE2 (Pentium 4 or above)
   System memory: >= 1GByte RAM I guess
   Graphics card: If CPU mode (/cpu), any old piece of junk should be fine.
   OS: Microsoft Windows 7 but probably works in older OS's
   DirectX 9.0 or above

This demo may be distributed freely as long as all files are included.

Unreleased demo projects made with the engine include:
   * A Voxlap Cave Demo remake
   * TomCar - a 'Stunts' type remake by Tom Dobrowolski
I may release these at some point. The engine code currently compiles with
Microsoft Visual C/C++ 6.0. It should work fine with later versions of 32-bit
Visual C/C++.

I am open to commercial applications based on PND3D. You may find my contact
information at the at the bottom of my website main page here:
   http://advsys.net/ken

-Ken S.
------------------------------------------------------------------------------
Compiling:

I compiled the code with Microsoft Visual C/C++ 6.0. I use an old version of
the compiler in order to produce smaller EXEs (mostly because the old
MSCVRT.DLL comes with all versions of Windows). It should work with later
versions of Visual C as long as you use 32-bit mode. Unfortunately, PND3D
would not be easy to port to 64-bit mode due to my extensive use of 32-bit
in-line assembly language. Note that in-line assembly language (using _asm
blocks) is not supported in Microsoft's 64-bit compiler.

I like to compile at the command line. To set up your VC environment, run
VCVARS32.BAT. Make sure your environment variables (lib and include) point to
the right path. You'll need them to point to the Visual C directories as well
as the directories from the DirectX SDK. Once this is done, you are ready. I
have embedded a makefile at the top of each source file.

You can compile the examples from the VC GUI environment as well, but you'll
need to create your own project if you do so. Here are some hints on setting
it up to compile PND3D.C/SIMP.C:

   * If you use a version of VC more recent than 6.0 (who doesn't ;P), then
        please select/comment out the options at the top of SIMP.C/PND3D.C.
        This will remove warning (or error) messages.

   * Be sure to specify these non-default compiler settings:
        /J   default char type is unsigned
        /TP  compile all files as .cpp (I incorrectly use .c to save typing :)

   * You must add a bunch of libraries (LIB files) to your linker settings.
        There is a list of libraries at the top of PND3D.C.

   * To fix the "MSVCRT.LIB not found" error, in WINMAIN.CPP, change:
      #define USETHREADS 20
         To:
      #define USETHREADS 0

------------------------------------------------------------------------------
Rendering tricks:

I often get asked what makes PND3D's rendering so fast. You think you can do
as good as me? Well, you better have a thorough understanding of assembly
language, multithread techniques, and GPU shaders. I will do you a favor and
summarize all the tricks used in PND3D:

* While not necessarily a trick, it should first be stated that PND3D uses a
  standard 8-way octree. Each non-leaf node is a 64-bit structure containing:
     char chi: child byte mask: 1=has children - must recurse, 0=pure air or
               pure solid - don't recurse), and a solid byte
     char sol: solid byte mask: 1=pure solid inside, 0=not pure solid inside
     char mrk, mrk2: dummy bytes for structure alignment
     int ind: an index pointer to the first child node. There can be anywhere
              from 0 to 8 children depending on the child mask.
  During rendering, the octree is visited in front-to-back order, depth-first.
  This 'sorting' helps speed up rendering by allowing occlusion queries to
  skip large sections. Again, this is probably nothing new here, but it needs
  to be stated.

* I calculate bounding rectangles on screen using a single 'divps' instruction
  during projection. Each cube's bounding box is determined by only 4 of the 8
  vertices of a cube. These 4 vertices can be known in advance based on which
  rectangular tile of the screen it is inside.

* The screen is divided into large rectangular tiles (typically around 16-48
  tiles per screen). This is done for 2 reasons:

   1. To calculate bounding boxes of cubes more quickly. The brute force
      method to calculate a bounding box of a cube is to transform and project
      all 8 points and then find the minimum and maximum x and y coordinates.
      This can be sped up considerably if you happen to know which 4 of the 8
      vertices actually contribute to an edge of the bounding box in advance.
      In fact, it turns out large sections of the screen have the same 4
      vertices contributing to the same edges. Even better, these sections are
      axis-aligned rectangular tiles on the screen.

      These tiles are determined by the 3 'vanishing' points of the voxel grid
      (and on the front half of the screen space). To calculate a vanishing
      point, imagine trying to render a cube really far away on each axis,
      such as at voxel grid location: (0,0,-1e9), (0,+1e9,0), etc.. If you
      projected these to screen coordinates, you would get 6 sets of x/y
      coordinates. Simply cut the screen horizontally and vertically (whenever
      they happen to be within the bounds of the screen - most aren't), and
      you will have your screen nicely divided into areas where a cube has the
      same 4 vertices generating the same 4 edges of the bounding box.

   2. For multithread optimization. I make a few additional horizontal cuts
      (about 16). Each tile is rendered as an independent job, clipped to the
      tile like it was a viewport, and then rendered from the root of the
      octree. So because of these cuts / tiles, some voxels along the edge can
      actually be rendered multiple times, but it's well worth it.

* I do an occlusion query for every non-leaf node of the tree that contains
  some solid. If the projected bounding box is larger than 32 pixels of width,
  I exit early and simply assume it's visible and visit its children anyway.
  Note that there are not very many large or nearby octree nodes, but this
  does skip a lot of needless screen area when processing the query.

  For a bounding box of 32 pixels of width or less, I have a bit array (cover
  buffer) - 1 bit per pixel, where each bit determines whether that pixel has
  been rendered or not. Then using an 'and' instruction, I can test 32 pixels
  simultaneously. If the region is found to be fully occluded, I skip it and
  all its children of the octree.

* For leaf nodes only (i.e. solid surface voxels being rendered), I visit each
  pixel of the bounding rectangle and perform 6 dot products in the inner loop
  using 2 'addps' and 2 'movmskps' instructions (25% waste) to determine
  whether the pixel actually falls inside the projected cube. Note that a
  cube, when projected to screen, results in a 4- or 6- sided convex polygon.

* The above steps are all done on the CPU. A rendered pixel on the screen is
  not your typical 32-bit ARGB color. Instead, texture mapping is done during
  a second pass. I write a 64-bit pixel, which contains 12 bits x, 12 bits y,
  12 bits z, and a 28-bit index to the leaf node which holds information about
  the surface voxel. The GPU is given the voxel position and a pointer to its
  surface structure. The shader basically raytraces to a cube which it already
  knows it will hit. The GPU determines what face of the cube with a few
  simple cases. The GPU then does the work of texture mapping with fancy
  filters like bilinear and mip mapping.

------------------------------------------------------------------------------

PND3D controls:

General: ---------------------------------------------------------------------
                    ESC: quit
                 Ctrl L: load VOX/KVX/KV6/VXL/KVO
                 Ctrl S: save KV6/KVO
                      G: toggle wireframe cubes & 3D brush display
                      S: toggle shader (CPU only)
                KPEnter: toggle cube face shade factor (none/some(def.)/a lot)

Camera: ----------------------------------------------------------------------
       Arrows/RCtrl/KP0: move camera
                  mouse: rotate camera
                    ,/.: orbit camera around origin horizontally
              PGUP/PGDN: orbit camera around origin vertically
              L/R.Shift: hold for 16x slower/faster movement
                    {/}: change movement speed by 2x
                KP/,KP*: change zoom
                    KP5: reset zoom
                      /: reset camera
                Shift /: reset camera except: keep pos & quantizing ori
                    ;/': change collision radius (fatness) by 2x
                    <,>: hold to change mix of color vs. texture

Mod: -------------------------------------------------------------------------
                    Tab: grab surface at cursor
                  Space: paint surface at cursor
            Shift Space: paint all in sphere of brush radius at cursor
                KP+/KP-: inc/dec brightness at cursor
           Ctrl KP+/KP-: inc/dec texture at cursor
                      V: select new texture at cursor
                      P: select new color at cursor
                      H: remove connected region at cursor
               Home/End: add/remove sphere at cursor
         Shift Home/End: add/remove cube at cursor
  Ctrl (Shift) Home/End: add/remove object (see ^), growing grid if necessary.
                Ins/Del: add/remove single voxel
               Ctrl LMB: plot sphere at brush sphere cursor (enable wireframe)
           Alt Home/End: voxel spray/suck (SLAB6 tool)
              (Shift) R: add/remove 64 random spheres
         Ctrl (Shift) R: add/remove 16384 random voxels
          (Shift) Alt C: add/remove random drawcone
                 Ctrl N: re-estimate all normals (may be slow)
                Shift N: normalize colors with textures (GPU only)
                      M: freeze selected sprite onto previously select sprite

Sprite: ----------------------------------------------------------------------
            Alt Ins/Del: dup/remove current sprite (can't remove last one)
   Alt Arrows/RCtrl/KP0: move sprite
                Alt ,/.: rotate sprite horizontally
          Alt PGUP/PGDN: rotate sprite vertically
            Alt KP/,KP*: change sprite size
             LShift ,/.: change brightness
             RShift ,/.: change texture/solid color mix
                    LMB: select sprite under cursor (enable wireframe to see)
                      \: cycle selected sprite (enable wireframe to see)

Brush: -----------------------------------------------------------------------
 LCtrl Arrows/RCtrl/KP0: move 3D brush (press 'G' to see brush)
                    [/]: change brush radius
                LMB/RMB: add/remove 3D brush (press 'G' to see brush)

Physics: ---------------------------------------------------------------------
                 Ctrl C: toggle collision
                 Ctrl H: toggle hover checking (removes hovers at activation)
                 Ctrl G: toggle gravity
                  Alt H: generate sprite at cursor if hovering
                  Alt S: swap solid&air (affects future physics ops)

Debug: -----------------------------------------------------------------------
                  F1-F8: select number of threads to use for rendering
            Shift F1-F8: select threads to specific cores (can affect fps)
                      `: toggle draw close cubes
                      N: hold to show estimated normal at hit point
                      C: "compact" octree
                Shift C: check reduce allocated buffer sizes
                      F: swizzle (mirror/flip axes)
                Shift F: test physics
              (Shift) O: make sprite axes non-orthogonal
                      U: update surf buffer (GPU only)
                      I: toggle glswapinterval 0/1 (hw fps limit, GPU only)
                  Alt B: replace sprite with sphere at brush cursor
                Shift B: shrink-wrap grid
                      B: grow grid
                 Ctrl B: grow grid, centered
                 Ctrl M: draw random brush_bmp_* (small/fast/general brush)
                      A: test oct_modnew(): make new sprite from brush&oct

Command line options: --------------------------------------------------------
C:\>pnd3d (options)

options are:
   filename        Load voxel object. Supports: KVO,VXL,KV6,KVX,VOX,PNG
   ~filename       Load voxel object, inverting alpha heightmap (PNG only)
   /zip=filename   Mount ZIP file (files inside treated as local directory)
   /out=filename   Save to voxel object and quit. Supported formats: KVO,KV6
   /tile=filename  Select image w/16x16 grid of tiles (default:klabtiles.png)
   /sky=filename   Select skybox (dimensions must be proportional to 1x6)
   /info           Display octree info after load then quit
   /win            Run in window (default)
   /full           Run full screen
   /#x#(x)         Specify screen resolution. Default: /1024x768  Examples:
                     /640x480
                     /1024x768x  <-the extra 'x' specifies full screen
   /thr=#          Specify # threads. Default:autodetected # cores. (1-64)
   /ls=#           Specify log2 voxel resolution. Range:1-12 (default:8)
   /ils=#          Specify log2 instancing resolution. Range=1-? (default:0)
   /i=#            Initial glswapinterval (0,1) (GPU only)
   /fogdist=#      Typical range:0.0-4.0. Use 1e32 for infinite (draws skybox)
   /fogcol=#       Select fog color (hex colors supported with 0x prefix)

   /cpu            Force 2nd stage rendering to CPU
   /gpu            Force 2nd stage rendering to GPU
   /arbasm         Force 2nd stage rendering to ARB ASM (GPU only)
   /glsl           Force 2nd stage rendering to GLSL    (GPU only)
   /filt           Select filter: 0=nearest, 1=bilinear, 2=mipmap (GLSL only)

Cool things worth trying: ----------------------------------------------------

   At command line:
      pnd3d /ls=12   'G', ']' until big, many 'Home', Ctrl+C to go inside, '{'
      pnd3d /ils=4
      pnd3d /cpu
      pnd3d /fogcol=0xc08080 /fogdist=1.5
      pnd3d /fogdist=1e32
      pnd3d /tile=x
      pnd3d ~tomland.png     NOTE:TOMLAND.PNG from GENLAND.EXE in GROUDRAW.ZIP

   Inside app:
      Ins/Del, Home/End, Tab&Space (with mouse over highlighted model)
      G .. Alt Ins .. Ctrl+C .. Alt Arrows
      F .. Home/End
      Alt+H (with cursor over floating object)

------------------------------------------------------------------------------
PND3D Engine non-commercial license:

[1] Any derivative works based on PND3D may be distributed as long as it is
    free of charge and through noncommercial means.

[2] You must give me proper credit. This line of text is sufficient:

       PND3D engine by Ken Silverman (http://advsys.net/ken)

    Make sure it is clearly visible somewhere in your archive.

[3] If you wish to release modified source code to your game, please add the
    following line to each source file changed:

   // This file has been modified from Ken Silverman's original release

[4] I am open to commercial applications based on PND3D, however you must
    consult with me first to acquire a commercial license. Using PND3D as a
    test platform or as an advertisement to another commercial game is
    commercial exploitation and prohibited without a commercial license.

------------------------------------------------------------------------------
Contact info:

If you do anything cool with PND3D, I would love to hear about it! I prefer
that you contact me via email, which can be found at the bottom of the main
page of my website.

If you have any questions or feature requests about other things in PND3D, it
doesn't hurt to ask, although keep in mind that I haven't really worked on the
engine since 2012.

Ken's official website: http://advsys.net/ken
------------------------------------------------------------------------------
